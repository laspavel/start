---
- name: Set required hostname
  hostname:
    name: "{{ hostname_ }}"
  when: (hostname_ is defined)

- name: Set required Selinux status
  selinux:
    policy: targeted
    state: "{{ selinux_status }}"

- name: Delete default dnf.conf
  file:
    path: "/etc/dnf/dnf.conf"
    state: absent

- name: Add new config in dnf.conf
  blockinfile:
    path: "/etc/dnf/dnf.conf"
    block: |
        [main]
        gpgcheck=1
        installonly_limit=3
        clean_requirements_on_remove=True
        fastestmirror=true
        max_parallel_downloads=10
        deltarpm=true
        best=False
        skip_if_unavailable=True

- name: disable fedora-updates-modular.repo
  yum_repository:
    name: fedora-updates-modular
    description: fedora-updates-modular
    metalink: https://mirrors.fedoraproject.org/metalink?repo=updates-released-modular-source-f$releasever&arch=$basearch
    enabled: no

- name: disable fedora-modular.repo
  yum_repository:
    name: fedora-modular
    description: fedora-modular
    metalink: https://mirrors.fedoraproject.org/metalink?repo=fedora-modular-source-$releasever&arch=$basearch
    enabled: no

- name: Upgrade system
  dnf:
    name: '*'
    state: latest
    exclude: kernel*

- name: Enable the RPM Fusion repository
  dnf:
    name: "https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ansible_distribution_major_version}}.noarch.rpm"
    disable_gpg_check: yes
    state: present
  when: ansible_distribution == 'Fedora' 

- name: Enable the RPM Fusion repository
  dnf:
    name: "http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-{{ansible_distribution_major_version}}.noarch.rpm"
    disable_gpg_check: yes
    state: present
  when: ansible_distribution == 'Fedora'

- name: get google chrome repo
  dnf:
    name: fedora-workstation-repositories
    state: latest

- name: enable google chrome repo
  command: dnf config-manager --set-enabled google-chrome

- name: Enable DoubleCmd repo
  command: dnf copr enable -y vondruch/doublecmd

- name: Install programs
  yum:
    name: "{{ base_required_packages }}"
    state: present

- name: Upgrade firmware
  command: fwupdmgr get-devices -y && fwupdmgr refresh --force -y && fwupdmgr get-updates -y && fwupdmgr update --no-reboot-check -y

- name: Install the 'Development tools' package group
  yum:
    name: "@Development tools"
    state: present

- name: Set required timezone
  timezone:
    name: "{{ timezone }}"

- name: start the sshd service and enable it
  systemd:
    name: sshd
    state: started
    enabled: yes

- name: start the firewalld service and enable it
  systemd:
    name: firewalld
    state: started
    enabled: yes

- name: Install git
  yum:
    name: git
    state: present
  
- name: Clone dotfiles repository
  git:
    repo: 'https://github.com/laspavel/dotfiles.git'
    dest: /tmp/dotfiles
    clone: yes
    update: yes

- name: Check passfile is exists
  stat:
    path: "/home/{{ wrk_username }}/.pass"
  register: pass_res

- name: "Read passfile"
  shell: |
    cat /home/{{ wrk_username }}/.pass
  when: pass_res.stat.exists
  register: file_content

- name: "Save the passfile content to a variable"
  set_fact:
    passw: "{{ file_content.stdout }}"
  when: pass_res.stat.exists

- name: Unarchive a .ssh.zip
  unarchive:
    src: /tmp/dotfiles/src/.ssh.zip
    dest: /tmp/dotfiles/src
    extra_opts:
    - "-P{{ passw }}"
  when: pass_res.stat.exists

- name: Unarchive a .bash_history.zip
  unarchive:
    src: /tmp/dotfiles/src/.bash_history.zip
    dest: /tmp/dotfiles/src
    extra_opts:
    - "-P{{ passw }}"
  when: pass_res.stat.exists

- name: Unarchive a dump_gnome_settings.zip
  unarchive:
    src: /tmp/dotfiles/src/dump_gnome_settings.zip
    dest: /tmp/dotfiles/src
    extra_opts:
    - "-P{{ passw }}"
  when: pass_res.stat.exists

- name: Copy dotfiles to user home directory
  copy:
    src: "/tmp/dotfiles/src/"
    dest: "/home/{{ wrk_username }}"
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"
    force: yes
  ignore_errors: true

- name: Creates directory Vim-plug
  file:
    path: "/home/{{ wrk_username }}/.vim/autoload/"
    state: directory
    mode: "0775"
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"

- name: Creates directory local bin
  file:
    path: "/home/{{ wrk_username }}/.local/bin/"
    state: directory
    mode: "0775"
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"

- name: Configure Vim-plug
  get_url:
    url: "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
    dest: "/home/{{ wrk_username }}/.vim/autoload/plug.vim"
    mode: '0775'
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"

- name: Install Plugin
  shell: "vim +'PlugInstall --sync' +qall &> /dev/null"
  become: yes
  become_user: "{{ wrk_username }}"
  args:
    executable: /bin/bash

- name: mkdir SSH config directory
  file:
    state: directory
    owner: "{{ wrk_username }}"
    mode: "0700"
    recurse: yes
    dest: "/home/{{ wrk_username }}/.ssh/"

- name: Configure Git Autocomplete
  get_url:
    url: "https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash"
    dest: "/etc/bash_completion.d/git-completion.bash"
    mode: "0664"
  changed_when: false
