---
- name: dnf configure
  copy:
    src: "dnf.conf"
    dest: "/etc/dnf/dnf.conf"
    owner: root
    group: root
    mode: "0644"

- name: disable fedora-updates-modular.repo
  yum_repository:
    name: fedora-updates-modular
    description: fedora-updates-modular
    metalink: https://mirrors.fedoraproject.org/metalink?repo=updates-released-modular-source-f$releasever&arch=$basearch
    enabled: no

- name: disable fedora-modular.repo
  yum_repository:
    name: fedora-modular
    description: fedora-modular
    metalink: https://mirrors.fedoraproject.org/metalink?repo=fedora-modular-source-$releasever&arch=$basearch
    enabled: no

- name: Upgrade system
  dnf:
    name: '*'
    state: latest
    exclude: kernel*

#- name: Install epel-release
#  dnf:
#    name:
#      - epel-release
#    state: latest

- name: Enable the RPM Fusion repository
  dnf:
    name: "https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ansible_distribution_major_version}}.noarch.rpm"
    disable_gpg_check: yes
    state: present
  when: ansible_distribution == 'Fedora' 

- name: Enable the RPM Fusion repository
  dnf:
    name: "http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-{{ansible_distribution_major_version}}.noarch.rpm"
    disable_gpg_check: yes
    state: present
  when: ansible_distribution == 'Fedora'

- name: get google chrome repo
  dnf:
    name: fedora-workstation-repositories
    state: latest

- name: enable google chrome repo
  command: dnf config-manager --set-enabled google-chrome

- name: Enable DoubleCmd repo
  command: dnf copr enable -y vondruch/doublecmd

- name: Install programs
  yum:
    name: "{{ base_required_packages }}"
    state: present

#- name: Skype x64 install
#  dnf:
#    name: https://go.skype.com/skypeforlinux-64.rpm
#    disable_gpg_check: yes
#    state: latest

- name: Install the 'Development tools' package group
  yum:
    name: "@Development tools"
    state: present

- name: Set required timezone
  timezone:
    name: "{{ timezone }}"

- name: start the sshd service and enable it
  systemd:
    name: sshd
    state: started
    enabled: yes

- name: start the firewalld service and enable it
  systemd:
    name: firewalld
    state: started
    enabled: yes

- name: Creates directory Vim-plug
  file:
    path: "/home/{{ wrk_username }}/.vim/autoload/"
    state: directory
    mode: "0775"
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"

- name: Configure Vim-plug
  get_url:
    url: "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
    dest: "/home/{{ wrk_username }}/.vim/autoload/plug.vim"
    mode: '0775'
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"

- name: Add startup config
  blockinfile:
    dest: "/home/{{ wrk_username }}/.vimrc"
    content: |
      call plug#begin()
      Plug 'morhetz/gruvbox'
      call plug#end()
    mode: "0664"
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"
    marker: '" {mark} ANSIBLE MANAGED BLOCK'
    state: present
    insertafter: EOF
    create: yes

- name: Install Plugin
  shell: "vim +'PlugInstall --sync' +qall &> /dev/null"
  become: yes
  become_user: "{{ wrk_username }}"
  args:
    executable: /bin/bash

- name: Add vim config
  copy:
    src: "rc/.vimrc"
    dest: "/home/{{ wrk_username }}/.vimrc"
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"
    mode: "0664"
    force: yes
  ignore_errors: true

- name: Add bash config
  copy:
    src: "rc/.bashrc"
    dest: "/home/{{ wrk_username }}/.bashrc"
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"
    mode: "0664"
    force: yes
  ignore_errors: true

- name: Add git config
  copy:
    src: "rc/.gitconfig"
    dest: "/home/{{ wrk_username }}/.gitconfig"
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"
    mode: "0664"
    force: yes
  ignore_errors: true

- name: Add default gitignore
  copy:
    src: "rc/.gitignore"
    dest: "/home/{{ wrk_username }}/.gitignore"
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"
    mode: '0664'
    force: yes
  ignore_errors: true

- name: mkdir HTOP config directory
  file:
    state: directory
    owner: "{{ wrk_username }}"
    mode: "0700"
    dest: "/home/{{ wrk_username }}/.config/htop/"

- name: Add default HTOP config
  copy:
    src: "rc/htoprc"
    dest: "/home/{{ wrk_username }}/.config/htop/htoprc"
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"
    mode: "0664"
    force: yes
  ignore_errors: true

- name: mkdir MC config directory
  file:
    state: directory
    owner: "{{ wrk_username }}"
    mode: "0700"
    dest: "/home/{{ wrk_username }}/.config/mc/"

- name: Add default HTOP config
  copy:
    src: "rc/mcini"
    dest: "/home/{{ wrk_username }}/.config/mc/ini"
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"
    mode: "0664"
    force: yes
  ignore_errors: true

- name: mkdir SSH config directory
  file:
    state: directory
    owner: "{{ wrk_username }}"
    mode: "0700"
    dest: "/home/{{ wrk_username }}/.ssh/"

- name: mkdir SSH config.d directory
  file:
    state: directory
    owner: "{{ wrk_username }}"
    mode: "0700"
    dest: /home/{{ wrk_username }}/.ssh/.config.d/

- name: Add SSH config
  copy:
    src: "rc/sshconfig"
    dest: "/home/{{ wrk_username }}/.ssh/config"
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"
    mode: "0664"
    force: yes
  ignore_errors: true

- name: Add TOP config
  copy:
    src: "rc/.toprc"
    dest: "/home/{{ wrk_username }}/.toprc"
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"
    mode: "0664"
    force: yes
  ignore_errors: true

- name: Add TIG config
  copy:
    src: "rc/.tigrc"
    dest: "/home/{{ wrk_username }}/.tigrc"
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"
    mode: "0664"
    force: yes
  ignore_errors: true

- name: mkdir nano config directory
  file:
    state: directory
    owner: "{{ wrk_username }}"
    mode: "0755"
    dest: /home/{{ wrk_username }}/.nano/

- name: nano configure
  copy:
    src: "nanorc/"
    dest: "/home/{{ wrk_username }}/.nano/"
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"
    mode: "0644"
    force: yes
  ignore_errors: true

- name: Add NANO config
  copy:
    src: "rc/.nanorc"
    dest: "/home/{{ wrk_username }}/.nanorc"
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"
    mode: "0664"
    force: yes
  ignore_errors: true

- name: Configure Git Autocomplete
  get_url:
    url: "https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash"
    dest: "/etc/bash_completion.d/git-completion.bash"
    mode: "0664"
  changed_when: false
