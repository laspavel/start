---
- name: dnf configure
  copy:
    src: dnf.conf
    dest: /etc/dnf/dnf.conf
    owner: root
    group: root
    mode: 0644

- name: disable fedora-updates-modular.repo
  yum_repository:
    name: fedora-updates-modular
    description: fedora-updates-modular
    metalink: https://mirrors.fedoraproject.org/metalink?repo=updates-released-modular-source-f$releasever&arch=$basearch
    enabled: no

- name: disable fedora-modular.repo
  yum_repository:
    name: fedora-modular
    description: fedora-modular
    metalink: https://mirrors.fedoraproject.org/metalink?repo=fedora-modular-source-$releasever&arch=$basearch
    enabled: no

- name: Upgrade system
  dnf:
    name: '*'
    state: latest
    exclude: kernel*

#- name: Install epel-release
#  dnf:
#    name:
#      - epel-release
#    state: latest

- name: Enable the RPM Fusion repository
  dnf:
    name: "https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ansible_distribution_major_version}}.noarch.rpm"
    disable_gpg_check: yes
    state: present
  when: ansible_distribution == 'Fedora'

- name: Enable the RPM Fusion repository
  dnf:
    name: "http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-{{ansible_distribution_major_version}}.noarch.rpm"
    disable_gpg_check: yes
    state: present
  when: ansible_distribution == 'Fedora'

- name: get google chrome repo
  dnf:
    name: fedora-workstation-repositories
    state: latest

- name: enable google chrome repo
  command: dnf config-manager --set-enabled google-chrome

- name: Enable DoubleCmd repo
  command: dnf copr enable -y vondruch/doublecmd

- name: Download absru repo
  get_url:
    url: "https://dl.cloudsmith.io/public/asbru-cm/release/cfg/setup/bash.rpm.sh"
    dest: /tmp/script.rpm.sh
    mode: 775
    owner: root
    group: root

- name: Enable absru repo
  command: /tmp/script.rpm.sh

- name: Install programs
  yum:
    name: "{{ base_required_packages }}"
    state: present

#- name: Skype x64 install
#  dnf:
#    name: https://go.skype.com/skypeforlinux-64.rpm
#    disable_gpg_check: yes
#    state: latest

- name: Install the 'Development tools' package group
  yum:
    name: "@Development tools"
    state: present

- name: Set required timezone
  timezone:
    name: "{{ timezone }}"

- name: start the sshd service and enable it
  systemd:
    name: sshd
    state: started
    enabled: yes

- name: start the firewalld service and enable it
  systemd:
    name: firewalld
    state: started
    enabled: yes

- name: Creates directory Vim-plug
  file:
    path: "/home/{{ wrk_username }}/.vim/autoload/"
    state: directory
    mode: '0775'
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"

- name: Configure Vim-plug
  get_url:
    url: "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
    dest: "/home/{{ wrk_username }}/.vim/autoload/plug.vim"
    mode: '0775'
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"

- name: Add startup config
  blockinfile:
    dest: "/home/{{ wrk_username }}/.vimrc"
    content: | 
      call plug#begin()
      Plug 'morhetz/gruvbox'
      call plug#end()
    mode: '0664'
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"
    marker: '" {mark} ANSIBLE MANAGED BLOCK'
    state: present
    insertafter: EOF
    create: yes

- name: Install Plugin 
  shell: "vim +'PlugInstall --sync' +qall &> /dev/null"
  become: yes
  become_user: "{{ wrk_username }}"
  args:
    executable: /bin/bash

- name: Add vim config
  template:
    src: "vimrc.j2"
    dest: "/home/{{ wrk_username }}/.vimrc"
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"
    mode: '0664'
    force: yes
  ignore_errors: true

- name: Add bash config
  template:
    src: "bashrc.j2"
    dest: "/home/{{ wrk_username }}/.bashrc"
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"
    mode: '0664'
    force: yes
  ignore_errors: true

- name: Add Git config
  template:
    src: "gitconfig.j2"
    dest: "/home/{{ wrk_username }}/.gitconfig"
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"
    mode: '0664'
    force: yes
  ignore_errors: true
  
- name: mkdir SSH config directory
  file:
    state: directory
    owner: "{{ wrk_username }}"
    mode: 0700
    dest: /home/{{ wrk_username }}/.ssh/
    
- name: Add SSH config
  template:
    src: "sshconfig.j2"
    dest: "/home/{{ wrk_username }}/.ssh/config"
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"
    mode: '0664'
    force: yes
  ignore_errors: true
  
- name: Add TOP config
  template:
    src: "toprc.j2"
    dest: "/home/{{ wrk_username }}/.toprc"
    owner: "{{ wrk_username }}"
    group: "{{ wrk_username }}"
    mode: '0664'
    force: yes
  ignore_errors: true 
   
- name: Install HSTR
  yum:
    name: hstr
    state: present
  
- name: Configure HSTR
  shell: "hstr --show-configuration >> ~/.bashrc"
  become: yes
  become_user: "{{ wrk_username }}"
  args:
    executable: /bin/bash

- name: Configure Git Autocomplete
  get_url:
    url: "https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash"
    dest: "/etc/bash_completion.d/git-completion.bash"
    mode: 0664
  changed_when: false

- name: Configure bashrc - history 2
  become: yes
  become_user: "{{ wrk_username }}"
  lineinfile:
    path: "~/.bashrc"
    regexp: '{{item.From}}'
    line: '{{item.To}}'
    state: present  
  with_items:
    - { From: 'HISTTIMEFORMAT=.*', To: 'HISTTIMEFORMAT="[%d.%m.%y %T]"'}
    - { From: 'HISTSIZE=.*', To: 'HISTSIZE=30000'}
    - { From: '^HISTCONTROL=.*', To: 'HISTCONTROL=ignorespace'}


