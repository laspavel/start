#!/bin/bash
set -euo pipefail

ENABLE_PROXY=0
if [[ "${1:-}" == "--enable-proxy" ]]; then
  ENABLE_PROXY=1
fi

log() { printf "%s %s\n" "$(date '+%F %T')" "$*"; }
need_root() { [[ $EUID -eq 0 ]] || { echo "–¢—Ä–µ–±—É—é—Ç—Å—è root-–ø—Ä–∞–≤–∞: sudo $0"; exit 1; }; }
have() { command -v "$1" >/dev/null 2>&1; }

need_root

# --- 1) Docker CLI + –ø–ª–∞–≥–∏–Ω—ã ---
log "üßº –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ docker-compose (v1), –µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ brew..."
if brew list docker-compose &>/dev/null; then
  brew uninstall docker-compose
  log "‚úÖ –£–¥–∞–ª–µ–Ω–æ."
else
  log "‚ÑπÔ∏è docker-compose v1 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Homebrew."
fi

log "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ docker CLI –∏ –ø–ª–∞–≥–∏–Ω–æ–≤ (compose, buildx)..."
brew install docker docker-compose docker-buildx

log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π..."
docker --version || true
docker compose version || true
docker buildx version || true

log "üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤..."
docker --help | grep -q ' compose ' || echo "‚ùå compose –ø–ª–∞–≥–∏–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!"
docker --help | grep -q ' buildx '  || echo "‚ùå buildx –ø–ª–∞–≥–∏–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!"

# –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å alias
read -p "üîÅ –î–æ–±–∞–≤–∏—Ç—å alias docker-compose='docker compose' –≤ ~/.zshrc –∏–ª–∏ ~/.bashrc? (y/n): " reply
if [[ "$reply" =~ ^[Yy]$ ]]; then
  SHELL_RC="$HOME/.zshrc"
  [[ -n "${BASH_VERSION:-}" ]] && SHELL_RC="$HOME/.bashrc"
  if ! grep -q "alias docker-compose=" "$SHELL_RC" 2>/dev/null; then
    echo "alias docker-compose='docker compose'" >> "$SHELL_RC"
    log "‚úÖ Alias –¥–æ–±–∞–≤–ª–µ–Ω –≤ $SHELL_RC"
  else
    log "‚ÑπÔ∏è Alias —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ $SHELL_RC"
  fi
fi

# --- 2) –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ launchd (–∑–∞–º–µ–Ω–∞ /etc/cron.d –¥–ª—è macOS) ---
# –ó–∞–¥–∞—á–∞ 1: docker system prune -a --filter "until=2h"
PRUNE_PLIST="/Library/LaunchDaemons/com.local.docker.prune.plist"
cat > "$PRUNE_PLIST" <<'PL'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>Label</key><string>com.local.docker.prune</string>
  <key>ProgramArguments</key>
  <array>
    <string>/bin/bash</string>
    <string>-lc</string>
    <string>docker system prune -f --filter "until=2h" -a &gt;/dev/null 2&gt;&amp;1</string>
  </array>
  <key>StartCalendarInterval</key>
  <dict>
    <key>Hour</key><integer>1</integer>
    <key>Minute</key><integer>0</integer>
  </dict>
  <key>RunAtLoad</key><false/>
  <key>StandardOutPath</key><string>/dev/null</string>
  <key>StandardErrorPath</key><string>/dev/null</string>
</dict>
</plist>
PL

# –ó–∞–¥–∞—á–∞ 2: —É–¥–∞–ª–∏—Ç—å dangling volumes
VOL_PLIST="/Library/LaunchDaemons/com.local.docker.volumes-cleanup.plist"
cat > "$VOL_PLIST" <<'PL'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>Label</key><string>com.local.docker.volumes-cleanup</string>
  <key>ProgramArguments</key>
  <array>
    <string>/bin/bash</string>
    <string>-lc</string>
    <string>for vol in $(docker volume ls -q -f dangling=true); do docker volume rm "$vol" &gt;/dev/null 2&gt;&amp;1 || true; done</string>
  </array>
  <key>StartCalendarInterval</key>
  <dict>
    <key>Hour</key><integer>1</integer>
    <key>Minute</key><integer>1</integer>
  </dict>
  <key>RunAtLoad</key><false/>
  <key>StandardOutPath</key><string>/dev/null</string>
  <key>StandardErrorPath</key><string>/dev/null</string>
</dict>
</plist>
PL

chown root:wheel "$PRUNE_PLIST" "$VOL_PLIST"
chmod 0644 "$PRUNE_PLIST" "$VOL_PLIST"

# –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è
launchctl unload "$PRUNE_PLIST" 2>/dev/null || true
launchctl unload "$VOL_PLIST" 2>/dev/null || true
launchctl load -w "$PRUNE_PLIST"
launchctl load -w "$VOL_PLIST"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
# plutil -lint /Library/LaunchDaemons/com.local.docker.prune.plist

log "‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (1:00 –∏ 1:01 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —á–µ—Ä–µ–∑ launchd)."

# --- 3) daemon.json ---
DAEMON_JSON_CONTENT='{
 "log-driver": "json-file",
 "log-opts": {
    "max-size": "20m",
    "max-file": "3"
  },
 "default-address-pools": [
   {"base":"10.250.250.0/16","size":24}
 ]
}'

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ: Colima vs Docker Desktop
IS_COLIMA=0
if have colima && colima status >/dev/null 2>&1; then
  IS_COLIMA=1
fi

if [[ $IS_COLIMA -eq 1 ]]; then
  COLIMA_PROFILE="${COLIMA_PROFILE:-default}"
  COLIMA_DIR="$HOME/.colima/${COLIMA_PROFILE}"
  mkdir -p "$COLIMA_DIR"
  DAEMON_JSON_PATH="$COLIMA_DIR/daemon.json"

  # –ë—ç–∫–∞–ø
  if [[ -f "$DAEMON_JSON_PATH" ]]; then
    cp -a "$DAEMON_JSON_PATH" "${DAEMON_JSON_PATH}.$(date +%Y%m%d%H%M%S).bak"
  fi
  printf "%s\n" "$DAEMON_JSON_CONTENT" > "$DAEMON_JSON_PATH"
  log "‚úÖ –ó–∞–ø–∏—Å–∞–Ω $DAEMON_JSON_PATH"

  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Colima, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ dockerd
  log "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Colima (${COLIMA_PROFILE}) –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è daemon.json..."
  colima stop "${COLIMA_PROFILE}" || true
  # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω ‚Äî —Å—Ç–∞—Ä—Ç—É–µ–º —Å docker –∏ —É–∫–∞–∂–µ–º, —á—Ç–æ –Ω—É–∂–µ–Ω dockerd
  colima start "${COLIMA_PROFILE}" --docker
  log "‚úÖ Colima –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω."
else
  # Docker Desktop?
  if [[ -d "/Applications/Docker.app" ]]; then
    log "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω Docker Desktop. –û–Ω –ù–ï —á–∏—Ç–∞–µ—Ç host:/etc/docker/daemon.json; –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ GUI (Resources ‚Üí Advanced, etc.) –∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ Colima."
  else
    # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è Linux, –Ω–æ –Ω–∞ macOS dockerd –Ω–∞ —Ö–æ—Å—Ç–µ –æ–±—ã—á–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:
    mkdir -p /etc/docker
    echo "$DAEMON_JSON_CONTENT" > /etc/docker/daemon.json
    log "‚ÑπÔ∏è /etc/docker/daemon.json —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–∞ macOS dockerd –Ω–∞ —Ö–æ—Å—Ç–µ –æ–±—ã—á–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ Colima."
  fi
fi

# --- 4) (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) Proxy –¥–ª—è dockerd –≤–Ω—É—Ç—Ä–∏ Colima VM ---
if [[ $ENABLE_PROXY -eq 1 ]]; then
  if [[ $IS_COLIMA -eq 0 ]]; then
    log "‚ö†Ô∏è --enable-proxy –∑–∞–¥–∞–Ω, –Ω–æ Colima –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ–∫—Å–∏."
  else
    HTTP_PROXY_VAL="${HTTP_PROXY:-}"
    HTTPS_PROXY_VAL="${HTTPS_PROXY:-${HTTP_PROXY_VAL}}"
    NO_PROXY_VAL="${NO_PROXY:-localhost,127.0.0.1,::1}"

    if [[ -z "$HTTP_PROXY_VAL" && -z "$HTTPS_PROXY_VAL" ]]; then
      log "‚ö†Ô∏è –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –∑–∞–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ HTTP_PROXY/HTTPS_PROXY –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—É—Å–∫ —Å --enable-proxy."
    else
      log "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è dockerd –≤–Ω—É—Ç—Ä–∏ Colima-VM (systemd drop-in)..."
      colima ssh "${COLIMA_PROFILE}" sudo mkdir -p /etc/systemd/system/docker.service.d
      colima ssh "${COLIMA_PROFILE}" "printf '%s\n' \
\"[Service]\" \
\"Environment=HTTP_PROXY=${HTTP_PROXY_VAL}\" \
\"Environment=HTTPS_PROXY=${HTTPS_PROXY_VAL}\" \
\"Environment=NO_PROXY=${NO_PROXY_VAL}\" \
| sudo tee /etc/systemd/system/docker.service.d/http-proxy.conf >/dev/null"

      log "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ docker.service –≤ Colima-VM..."
      colima ssh "${COLIMA_PROFILE}" sudo systemctl daemon-reload
      colima ssh "${COLIMA_PROFILE}" sudo systemctl restart docker.service
      log "‚úÖ –ü—Ä–æ–∫—Å–∏ –ø—Ä–∏–º–µ–Ω—ë–Ω."
    fi
  fi
fi

log "üéâ –ì–æ—Ç–æ–≤–æ."
